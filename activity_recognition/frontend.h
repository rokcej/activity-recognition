const char *frontend_script =
    "const DATA_URL=\"http://192.168.100.33/data\",vsSource=\"#version 300 es\\n\\tin vec3 aPos;\\n\\tin vec3 aNorm;\\n\\tuniform mat4 uPVMat;\\n\\tuniform mat4 uMMat;\\n\\n\\tout vec3 vPos;\\n\\tout vec3 vNorm;\\n\\n\\tvec3 scale = vec3(0.8, 0.1, 1.0);\\n\\n\\tvoid main() {\\n\\t\\tvec4 pos = uMMat * vec4((scale * aPos), 1.0);\\n\\t\\tgl_Position = uPVMat * pos;\\n\\t\\tvPos = vec3(pos);\\n\\t\\tvNorm = mat3(transpose(inverse(uMMat))) * aNorm;\\n\\t}\\n\",fsSource=\"#version 300 es\\n\\tprecision highp float;\\n\\n\\t#define NUM_LIGHTS 2\\n\\n\\tstruct Light {\\n\\t\\tvec3 color;\\n\\t\\tvec3 pos;\\n\\t\\tfloat intensity;\\n\\t\\tfloat ambient;\\n\\t};\\n\\n\\tin vec3 vPos;\\n\\tin vec3 vNorm;\\n\\tuniform vec3 uCameraPos;\\n\\n\\tout vec4 oColor;\\n\\n\\tLight lights[NUM_LIGHTS] = Light[NUM_LIGHTS](\\n\\t\\tLight(\\n\\t\\t\\tvec3(1.0, 0.8, 0.5),\\n\\t\\t\\tvec3(-2.0, 5.0, -1.0),\\n\\t\\t\\t1.0, 0.3\\n\\t\\t),\\n\\t\\tLight(\\n\\t\\t\\tvec3(1.0, 0.6, 0.375),\\n\\t\\t\\tvec3(3.0, -6.0, -2.0),\\n\\t\\t\\t0.8, 0.0\\n\\t\\t)\\n\\t);\\n\\n\\tfloat shininess = 16.0;\\n\\tvec2 attenuation = vec2(0.1, 0.001);\\n\\n\\tvoid main() {\\n\\t\\tvec3 color = vec3(0.0);\\n\\t\\tfor (int i = 0; i < NUM_LIGHTS; ++i) {\\n\\t\\t\\t// Blinn-Phong reflection model\\n\\t\\t\\tvec3 lightDir = lights[i].pos - vPos;\\n\\t\\t\\tfloat dist = length(lightDir);\\n\\t\\t\\tlightDir = normalize(lightDir);\\n\\t\\t\\tvec3 viewDir  = normalize(uCameraPos - vPos);\\n\\t\\t\\tvec3 halfDir  = normalize(lightDir + viewDir);\\n\\n\\t\\t\\tfloat specular = pow(max(dot(vNorm, halfDir), 0.0), shininess);\\n\\t\\t\\tfloat diffuse = max(dot(vNorm, lightDir), 0.0);\\n\\n\\t\\t\\tcolor += (lights[i].ambient + (diffuse + specular) * (lights[i].intensity / (1.0 + dist * attenuation.x + dist * dist * attenuation.y))) * lights[i].color;\\n\\t\\t}\\n\\t\\toColor = vec4(color, 1.0);\\n\\t}\\t\\n\";function createShader(t,n,e){const r=t.createShader(n);return t.shaderSource(r,e),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(console.log(t.getShaderInfoLog(r)),t.deleteShader(r),null)}function createProgram(t,n,e){const r=t.createProgram();return t.attachShader(r,n),t.attachShader(r,e),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)?r:(console.log(t.getProgramInfoLog(r)),t.deleteProgram(r),null)}function normalizeVector(t){const n=1/Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);return t[0]*=n,t[1]*=n,t[2]*=n,t}function perspectiveMatrix(t,n,e,r){const o=t*Math.PI/180,a=1/Math.tan(.5*o),i=1/(e-r);return new Float32Array([a/n,0,0,0,0,a,0,0,0,0,(e+r)*i,-1,0,0,2*e*r*i,0])}function lookAtMatrix(t,n,e){const r=[t[0]-n[0],t[1]-n[1],t[2]-n[2]];normalizeVector(r);const o=[e[1]*r[2]-e[2]*r[1],e[2]*r[0]-e[0]*r[2],e[0]*r[1]-e[1]*r[0]];normalizeVector(o);const a=[r[1]*o[2]-r[2]*o[1],r[2]*o[0]-r[0]*o[2],r[0]*o[1]-r[1]*o[0]];normalizeVector(a);const i=[-(o[0]*t[0]+o[1]*t[1]+o[2]*t[2]),-(a[0]*t[0]+a[1]*t[1]+a[2]*t[2]),-(r[0]*t[0]+r[1]*t[1]+r[2]*t[2])];return new Float32Array([o[0],a[0],r[0],0,o[1],a[1],r[1],0,o[2],a[2],r[2],0,i[0],i[1],i[2],1])}function rotationXMatrix(t){const n=Math.sin(t),e=Math.cos(t);return new Float32Array([1,0,0,0,0,e,n,0,0,-n,e,0,0,0,0,1])}function rotationYMatrix(t){const n=Math.sin(t),e=Math.cos(t);return new Float32Array([e,0,-n,0,0,1,0,0,n,0,e,0,0,0,0,1])}function rotationZMatrix(t){const n=Math.sin(t),e=Math.cos(t);return new Float32Array([e,n,0,0,-n,e,0,0,0,0,1,0,0,0,0,1])}function scalingMatrix(t,n,e){return new Float32Array([t,0,0,0,0,n,0,0,0,0,e,0,0,0,0,1])}function translationMatrix(t,n,e){return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,n,e,1])}function identityMatrix(){return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}function multiplyMatrix(t,n,e){e||(e=new Float32Array(16));for(let r=0;r<4;++r)for(let o=0;o<4;++o){let a=0;for(let e=0;e<4;++e)a+=t[4*e+r]*n[4*o+e];e[4*o+r]=a}return e}function main(){const t=document.getElementById(\"canvas\"),n=t.getContext(\"webgl2\")||t.getContext(\"webgl\");if(!n)return void console.log(\"Unable to initialize WebGL.\");const e=createShader(n,n.VERTEX_SHADER,vsSource),r=createShader(n,n.FRAGMENT_SHADER,fsSource),o=createProgram(n,e,r);if(!o)return void console.log(\"Unable to create program.\");const a={};for(let t=0;t<n.getProgramParameter(o,n.ACTIVE_UNIFORMS);++t){const e=n.getActiveUniform(o,t);a[e.name]=n.getUniformLocation(o,e.name)}const i={};for(let t=0;t<n.getProgramParameter(o,n.ACTIVE_ATTRIBUTES);++t){const e=n.getActiveAttrib(o,t);i[e.name]=n.getAttribLocation(o,e.name)}const c=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23],l=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,l),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,1,0,0,1,1,-1,1,0,0,1,1,1,1,0,0,1,-1,1,1,0,0,1,-1,-1,-1,0,0,-1,-1,1,-1,0,0,-1,1,1,-1,0,0,-1,1,-1,-1,0,0,-1,-1,1,-1,0,1,0,-1,1,1,0,1,0,1,1,1,0,1,0,1,1,-1,0,1,0,-1,-1,-1,0,-1,0,1,-1,-1,0,-1,0,1,-1,1,0,-1,0,-1,-1,1,0,-1,0,1,-1,-1,1,0,0,1,1,-1,1,0,0,1,1,1,1,0,0,1,-1,1,1,0,0,-1,-1,-1,-1,0,0,-1,-1,1,-1,0,0,-1,1,1,-1,0,0,-1,1,-1,-1,0,0]),n.STATIC_DRAW);const s=n.createVertexArray();n.bindVertexArray(s),n.enableVertexAttribArray(i.aPos),n.vertexAttribPointer(i.aPos,3,n.FLOAT,!1,24,0),n.enableVertexAttribArray(i.aNorm),n.vertexAttribPointer(i.aNorm,3,n.FLOAT,!1,24,12);const u=n.createBuffer();n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,u),n.bufferData(n.ELEMENT_ARRAY_BUFFER,new Uint8Array(c),n.STATIC_DRAW);const m={pos:new Float32Array([0,.8,2.5]),center:new Float32Array([0,0,0]),up:new Float32Array([0,1,0])},f=multiplyMatrix(perspectiveMatrix(60,t.width/t.height,.1,100),lookAtMatrix(m.pos,m.center,m.up),identityMatrix());function v(){fetch(DATA_URL).then(t=>t.json()).then(t=>requestAnimationFrame(()=>{!function(t){n.clearColor(0,0,0,1),n.clearDepth(1),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT),n.useProgram(o),n.bindVertexArray(s);const e=multiplyMatrix(rotationXMatrix(t.rot[0]*Math.PI/180),rotationZMatrix(-t.rot[1]*Math.PI/180));n.uniform3fv(a.uCameraPos,m.pos),n.uniformMatrix4fv(a.uPVMat,!1,f),n.uniformMatrix4fv(a.uMMat,!1,e),n.drawElements(n.TRIANGLES,c.length,n.UNSIGNED_BYTE,0),v()}(t)}))}n.enable(n.DEPTH_TEST),n.depthFunc(n.LEQUAL),v()}document.addEventListener(\"DOMContentLoaded\",main);\n";
