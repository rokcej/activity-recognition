// JavaScript code
const char *frontend_script =
    "const DATA_URL=\"http://192.168.100.33/data\",HISTORY_URL=\"http://192.168.100.33/history\",vsSource=\"#version 300 es\\n\\tin vec3 aPos;\\n\\tin vec3 aNorm;\\n\\tuniform mat4 uPVMat;\\n\\tuniform mat4 uMMat;\\n\\n\\tout vec3 vPos;\\n\\tout vec3 vNorm;\\n\\n\\tvec3 scale = vec3(0.8, 0.1, 1.0);\\n\\n\\tvoid main() {\\n\\t\\tvec4 pos = uMMat * vec4((scale * aPos), 1.0);\\n\\t\\tgl_Position = uPVMat * pos;\\n\\t\\tvPos = vec3(pos);\\n\\t\\tvNorm = mat3(transpose(inverse(uMMat))) * aNorm;\\n\\t}\\n\",fsSource=\"#version 300 es\\n\\tprecision highp float;\\n\\n\\t#define NUM_LIGHTS 2\\n\\n\\tstruct Light {\\n\\t\\tvec3 color;\\n\\t\\tvec3 pos;\\n\\t\\tfloat intensity;\\n\\t\\tfloat ambient;\\n\\t};\\n\\n\\tin vec3 vPos;\\n\\tin vec3 vNorm;\\n\\tuniform vec3 uCameraPos;\\n\\n\\tout vec4 oColor;\\n\\n\\tLight lights[NUM_LIGHTS] = Light[NUM_LIGHTS](\\n\\t\\tLight(\\n\\t\\t\\tvec3(1.0, 0.8, 0.5),\\n\\t\\t\\tvec3(-2.0, 5.0, -1.0),\\n\\t\\t\\t1.0, 0.3\\n\\t\\t),\\n\\t\\tLight(\\n\\t\\t\\tvec3(1.0, 0.6, 0.375),\\n\\t\\t\\tvec3(3.0, -6.0, -2.0),\\n\\t\\t\\t0.8, 0.0\\n\\t\\t)\\n\\t);\\n\\n\\tfloat shininess = 16.0;\\n\\tvec2 attenuation = vec2(0.1, 0.001);\\n\\n\\tvoid main() {\\n\\t\\tvec3 color = vec3(0.0);\\n\\t\\tfor (int i = 0; i < NUM_LIGHTS; ++i) {\\n\\t\\t\\t// Blinn-Phong reflection model\\n\\t\\t\\tvec3 lightDir = lights[i].pos - vPos;\\n\\t\\t\\tfloat dist = length(lightDir);\\n\\t\\t\\tlightDir = normalize(lightDir);\\n\\t\\t\\tvec3 viewDir  = normalize(uCameraPos - vPos);\\n\\t\\t\\tvec3 halfDir  = normalize(lightDir + viewDir);\\n\\n\\t\\t\\tfloat specular = pow(max(dot(vNorm, halfDir), 0.0), shininess);\\n\\t\\t\\tfloat diffuse = max(dot(vNorm, lightDir), 0.0);\\n\\n\\t\\t\\tcolor += (lights[i].ambient + (diffuse + specular) * (lights[i].intensity / (1.0 + dist * attenuation.x + dist * dist * attenuation.y))) * lights[i].color;\\n\\t\\t}\\n\\t\\toColor = vec4(color, 1.0);\\n\\t}\\t\\n\";function createShader(t,e,n){const a=t.createShader(e);return t.shaderSource(a,n),t.compileShader(a),t.getShaderParameter(a,t.COMPILE_STATUS)?a:(console.log(t.getShaderInfoLog(a)),t.deleteShader(a),null)}function createProgram(t,e,n){const a=t.createProgram();return t.attachShader(a,e),t.attachShader(a,n),t.linkProgram(a),t.getProgramParameter(a,t.LINK_STATUS)?a:(console.log(t.getProgramInfoLog(a)),t.deleteProgram(a),null)}function normalizeVector(t){const e=1/Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);return t[0]*=e,t[1]*=e,t[2]*=e,t}function perspectiveMatrix(t,e,n,a){const r=t*Math.PI/180,o=1/Math.tan(.5*r),i=1/(n-a);return new Float32Array([o/e,0,0,0,0,o,0,0,0,0,(n+a)*i,-1,0,0,2*n*a*i,0])}function lookAtMatrix(t,e,n){const a=[t[0]-e[0],t[1]-e[1],t[2]-e[2]];normalizeVector(a);const r=[n[1]*a[2]-n[2]*a[1],n[2]*a[0]-n[0]*a[2],n[0]*a[1]-n[1]*a[0]];normalizeVector(r);const o=[a[1]*r[2]-a[2]*r[1],a[2]*r[0]-a[0]*r[2],a[0]*r[1]-a[1]*r[0]];normalizeVector(o);const i=[-(r[0]*t[0]+r[1]*t[1]+r[2]*t[2]),-(o[0]*t[0]+o[1]*t[1]+o[2]*t[2]),-(a[0]*t[0]+a[1]*t[1]+a[2]*t[2])];return new Float32Array([r[0],o[0],a[0],0,r[1],o[1],a[1],0,r[2],o[2],a[2],0,i[0],i[1],i[2],1])}function rotationXMatrix(t){const e=Math.sin(t),n=Math.cos(t);return new Float32Array([1,0,0,0,0,n,e,0,0,-e,n,0,0,0,0,1])}function rotationYMatrix(t){const e=Math.sin(t),n=Math.cos(t);return new Float32Array([n,0,-e,0,0,1,0,0,e,0,n,0,0,0,0,1])}function rotationZMatrix(t){const e=Math.sin(t),n=Math.cos(t);return new Float32Array([n,e,0,0,-e,n,0,0,0,0,1,0,0,0,0,1])}function scalingMatrix(t,e,n){return new Float32Array([t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1])}function translationMatrix(t,e,n){return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,n,1])}function identityMatrix(){return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}function multiplyMatrix(t,e,n){n||(n=new Float32Array(16));for(let a=0;a<4;++a)for(let r=0;r<4;++r){let o=0;for(let n=0;n<4;++n)o+=t[4*n+a]*e[4*r+n];n[4*r+a]=o}return n}function initWebGL(){const t=document.getElementById(\"canvas\"),e=t.getContext(\"webgl2\")||t.getContext(\"webgl\");if(!e)return void console.log(\"Unable to initialize WebGL.\");const n=createShader(e,e.VERTEX_SHADER,vsSource),a=createShader(e,e.FRAGMENT_SHADER,fsSource),r=createProgram(e,n,a);if(!r)return void console.log(\"Unable to create program.\");const o={};for(let t=0;t<e.getProgramParameter(r,e.ACTIVE_UNIFORMS);++t){const n=e.getActiveUniform(r,t);o[n.name]=e.getUniformLocation(r,n.name)}const i={};for(let t=0;t<e.getProgramParameter(r,e.ACTIVE_ATTRIBUTES);++t){const n=e.getActiveAttrib(r,t);i[n.name]=e.getAttribLocation(r,n.name)}const c=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23],s=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,0,0,1,1,-1,1,0,0,1,1,1,1,0,0,1,-1,1,1,0,0,1,-1,-1,-1,0,0,-1,-1,1,-1,0,0,-1,1,1,-1,0,0,-1,1,-1,-1,0,0,-1,-1,1,-1,0,1,0,-1,1,1,0,1,0,1,1,1,0,1,0,1,1,-1,0,1,0,-1,-1,-1,0,-1,0,1,-1,-1,0,-1,0,1,-1,1,0,-1,0,-1,-1,1,0,-1,0,1,-1,-1,1,0,0,1,1,-1,1,0,0,1,1,1,1,0,0,1,-1,1,1,0,0,-1,-1,-1,-1,0,0,-1,-1,1,-1,0,0,-1,1,1,-1,0,0,-1,1,-1,-1,0,0]),e.STATIC_DRAW);const l=e.createVertexArray();e.bindVertexArray(l),e.enableVertexAttribArray(i.aPos),e.vertexAttribPointer(i.aPos,3,e.FLOAT,!1,24,0),e.enableVertexAttribArray(i.aNorm),e.vertexAttribPointer(i.aNorm,3,e.FLOAT,!1,24,12);const d=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,d),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint8Array(c),e.STATIC_DRAW);const u={pos:new Float32Array([0,.8,2.5]),center:new Float32Array([0,0,0]),up:new Float32Array([0,1,0])},m=multiplyMatrix(perspectiveMatrix(60,t.width/t.height,.1,100),lookAtMatrix(u.pos,u.center,u.up),identityMatrix());function g(){fetch(DATA_URL).then(t=>t.json()).then(t=>requestAnimationFrame(()=>{!function(t){e.clearColor(0,0,0,1),e.clearDepth(1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.useProgram(r),e.bindVertexArray(l);const n=multiplyMatrix(rotationXMatrix(t.rot[0]*Math.PI/180),rotationZMatrix(-t.rot[1]*Math.PI/180));e.uniform3fv(o.uCameraPos,u.pos),e.uniformMatrix4fv(o.uPVMat,!1,m),e.uniformMatrix4fv(o.uMMat,!1,n),e.drawElements(e.TRIANGLES,c.length,e.UNSIGNED_BYTE,0),g()}(t)}))}e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),g()}function initGraphs(){let t=0;function e(){t=0,document.getElementById(\"btnRel\").classList.add(\"active\"),document.getElementById(\"btnAbs\").classList.remove(\"active\")}e(),document.getElementById(\"btnRel\").addEventListener(\"click\",e),document.getElementById(\"btnAbs\").addEventListener(\"click\",function(){t=3,document.getElementById(\"btnAbs\").classList.add(\"active\"),document.getElementById(\"btnRel\").classList.remove(\"active\")});const n=[];for(let t=0;t<210;++t){let e=(200-t)/20;n.push(-e)}const a={labels:n,datasets:[{label:\"x\",backgroundColor:\"rgb(255, 99, 132)\",borderColor:\"rgb(255, 99, 132)\",data:new Array(201)},{label:\"y\",backgroundColor:\"rgb(99, 255, 117)\",borderColor:\"rgb(99, 255, 117)\",data:new Array(201)},{label:\"z\",backgroundColor:\"rgb(99, 141, 255)\",borderColor:\"rgb(99, 141, 255)\",data:new Array(201)}]},r={labels:n,datasets:[{label:\"std_dev(x)\",backgroundColor:\"rgb(255, 99, 132)\",borderColor:\"rgb(255, 99, 132)\",data:new Array(201)},{label:\"std_dev(y)\",backgroundColor:\"rgb(99, 255, 117)\",borderColor:\"rgb(99, 255, 117)\",data:new Array(201)},{label:\"std_dev(z)\",backgroundColor:\"rgb(99, 141, 255)\",borderColor:\"rgb(99, 141, 255)\",data:new Array(201)}]},o={type:\"line\",data:a,options:{responsive:!1,animation:{duration:0},scales:{y:{title:{text:\"acceleration [m/s^2]\",display:!0},min:-15,max:15},x:{title:{text:\"time [s]\",display:!0},display:!0,ticks:{maxTicksLimit:11}}},elements:{point:{radius:0}}}},i={type:\"line\",data:r,options:{responsive:!1,animation:{duration:0},scales:{y:{title:{text:\"standard deviation\",display:!0},min:-1,max:10},x:{title:{text:\"time [s]\",display:!0},display:!0,ticks:{maxTicksLimit:11}}},elements:{point:{radius:0}}}};var c=new Chart(document.getElementById(\"chart_acc\"),o),s=new Chart(document.getElementById(\"chart_dev\"),i);function l(){fetch(HISTORY_URL).then(t=>t.json()).then(e=>requestAnimationFrame(()=>{!function(e){m.textContent=u[e.activity];let n=e.acc[0].length,o=e.current_step-d,i=0;o>n&&(i=Math.min(o-n,201),o=n);for(let n=0;n<3;++n)i>0&&(a.datasets[n].data=a.datasets[n].data.slice(i).concat(new Array(i)),r.datasets[n].data=r.datasets[n].data.slice(i).concat(new Array(i))),a.datasets[n].data=a.datasets[n].data.slice(o).concat(e.acc[n+t].slice(-o)),r.datasets[n].data=r.datasets[n].data.slice(o).concat(e.dev[n+t].slice(-o));d=e.current_step,c.update(),s.update(),setTimeout(l,100)}(e)}))}let d=0;const u=[\"None\",\"Walking\",\"Jumping\"],m=document.getElementById(\"activity\");l()}function main(){initWebGL(),initGraphs()}document.addEventListener(\"DOMContentLoaded\",main);\n";

// CSS code
const char *frontend_css =
    "html { background-color: #202020; } "
    "body { font-family: sans-serif; max-width: 1080px; margin: auto; padding: 0; background-color: #ecf0f1; color: #222 } "
    ".header { background-color: #2c3e50; color: #ecf0f1; padding: 32px 24px; } "
    ".main { margin: 0; padding: 32px 24px; } "
    ".footer { font-size: 14px; text-align: center; margin: 0; padding: 2px; background-color: #dae1e3; color: #555; } "
    ".button { background-color: #2879af; color: rgb(204, 204, 204); padding: 8px 12px; margin-right: 12px; display: inline-block; cursor: pointer; user-select: none; } "
    ".button:hover { background-color: #48a5e4; color: #FFF; } "
    ".active { background-color: #3498db; color: rgb(248, 248, 248); } "
    "canvas { margin: auto; display: block; } "
    ".activity { font-size: 22px; text-align: center; } "
    "#activity { font-size: 32px; color: #3498db; }";

// HTML code
const char *frontend_body =
    "<div class=\"main\">"
    "    <div>"
    "        <h2>Acceleration</h2>"
    "        <p class=\"activity\">Activity:<br><span id=\"activity\">...</span></p>"
    "        <p>"
    "            <span id=\"btnRel\" class=\"button active\">Show relative measurements</span><span id=\"btnAbs\" class=\"button\">Show absolute measurements</span>"
    "        </p>"
    "        <p>Relative measurements are the values obtained from the accelerometer.</p>"
    "        <p>Absolute measurements are transformed in such a way that z-axis always shows the vertical component of acceleration, while x-axis and y-axis always show the horizontal components of acceleration.</p>"
    "        <canvas id=\"chart_acc\" width=\"960\" height=\"360\"></canvas>"
    "        <canvas id=\"chart_dev\" width=\"960\" height=\"240\"></canvas>"
    "    </div>"
    "    <div>"
    "        <h2>Orientation</h2>"
    "        <p>The detected orientation of the board is displayed in real-time using WebGL.</p>"
    "        <canvas id=\"canvas\" width=\"960\" height=\"360\"></canvas>"
    "    </div>"
    "</div>"
    "<p class=\"footer\">Made by Rok Cej</p>";
